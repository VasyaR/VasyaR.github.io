openapi: 3.0.3
info:
  title: StudentRating API
  version: 1.0.0
tags:
  - name: admin
    description: Admin management
  - name: student
    description: Student management
  - name: teacher
    description: Teacher management
  - name: university
    description: University management
paths:
  /admin:
    post: 
      tags: 
        - admin
      summary: Add a new admin
      operationId: addNewAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: Sanjo
                password:
                  type: string
                  example: sd355ohf2348d
      responses:
        '200':
          description: Created a new admin
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          
  /admin/{admin_id}:
    post:
      tags:
        - admin
      summary: Update the admin
      operationId: updateAdmin
      parameters:
        - name: admin_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  example: sd355ohf2348d
      responses:
        '204':
          description: The admin was updated
        '404':
          description: The admin was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
    delete:
      tags:
        - admin
      summary: Delete the admin
      operationId: deleteAdmin
      parameters:
        - name: admin_id
          in: path
          required: true
          schema:
            type: integer
            example: 0
      responses:
        '204':
          description: The admin was deleted
        '404':
          description: The admin was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          
  /admin/login:
    post:
      tags:
        - admin
      summary: Logs admin into the system
      operationId: loginAdmin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: Sanjo
                password:
                  type: string
                  example: sd355ohf2348d
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid login/password supplied
        '404':
          description: User not found
        '401':
          description: Incorrect password
          
  /admin/logout:
    get:
      tags:
        - admin
      summary: Logs out current logged in admin session
      description: ''
      operationId: logoutAdmin
      parameters: []
      responses:
        '200':
          description: successful operation
      security:
          - auth:
            - admin
  
  /student:
    post: 
      tags: 
        - student
      summary: Add a new student
      operationId: addNewStudent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: Sanjo
                password:
                  type: string
                  example: sd355ohf2348d
                info:
                  $ref: "#/components/schemas/Student"
      responses:
        '200':
          description: Created a new student
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
  
  /student/{student_id}:
    get:
      tags:
        - student
      summary: Get the student
      operationId: getStudent
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: The student was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          - student # a student can request only himself
    post:
      tags:
        - student
      summary: Update the student
      operationId: updateStudent
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: sd355ohf2348d
      responses:
        '204':
          description: The student was updated
        '404':
          description: The student was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
    delete:
      tags:
        - student
      summary: Delete the student
      operationId: deleteStudent
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '204':
          description: The student was deleted
        '404':
          description: The student was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          
  /student/{student_id}/rating:
    get:
      tags:
        - student
      summary: Get the student's rating
      operationId: getStudentRating
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
        - name: year
          in: query
          required: true
          schema:
            type: integer
        - name: semester # 1 or 2
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 2
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentRating"
        '404':
          description: Student not found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          - student # a student can view only his rating
  
  /student/{student_id}/subject/{subject_id}/points:
    get:
      tags:
        - student
      summary: get the student's subject's points
      operationId: getStudentSubjectPoints
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
        - name: year
          in: query
          required: true
          schema:
            type: integer
        - name: semester # 1 or 2
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 2
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  points:
                    type: integer
                    minimum: 0
                  teacher_id:
                    type: integer
                    minimum: 0
        '404':
          description: The student or the subject not found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          - student # a teacher can view only his subjects' points
          - teacher # a student can view only his points
    post:
      tags:
        - student
      summary: create or update the student's subject's points
      operationId: updateStudentSubjectPoints
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                year:
                  type: integer
                semester:
                  type: integer
                points:
                  type: integer
      responses:
        '204':
          description: Ok
        '404':
          description: The student or the subject not found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          - teacher # a teacher can changle only his subjects
          
  /student/login:
    post:
      tags:
        - student
      summary: Logs student into the system
      description: ''
      operationId: loginStudent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: Sanjo
                password:
                  type: string
                  example: sd355ohf2348d
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid login/password supplied
        '401':
          description: incorrect password
        '404':
          description: User not found
          
  /student/logout:
    get:
      tags:
        - student
      summary: Logs out current logged in student session
      description: ''
      operationId: logoutStudent
      parameters: []
      responses:
        default:
          description: successful operation
      security:
        - auth:
          - student
  
  /subject:
    post:
      tags:
        - teacher
      summary: Create a new subject
      operationId: createSubject
      requestBody:
        description: New subject
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Subject'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin

  /subject/{subject_id}:
    get:
      tags:
        - teacher
      summary: Get the subject
      operationId: getSubject
      parameters:
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '404':
          description: Subject not found
    post:
      tags:
        - teacher
      summary: Update the subject
      operationId: updateSubject
      parameters:
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Subject data
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Subject'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          - teacher # a teacher can view only his subjects
    delete:
      tags:
        - teacher
      summary: Delete the subject
      operationId: deleteSubject
      parameters:
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '204':
          description: Ok
        '404':
          description: Subject not found
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
        
  /teacher:
    post: 
      tags: 
        - teacher
      summary: Add a new teacher
      operationId: addNewTeacher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: Sanjo
                password:
                  type: string
                  example: sd355ohf2348d
                info:
                  $ref: "#/components/schemas/Teacher"
      responses:
        '200':
          description: Created a new teacher
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          
  /teacher/{teacher_id}:
    get:
      tags:
        - teacher
      summary: Get the teacher
      operationId: getTeacher
      parameters:
        - name: teacher_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Teacher'
        '404':
          description: The teacher was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          - teacher # teacher can change view himself
    post:
      tags:
        - teacher
      summary: Update the teacher
      operationId: updateTeacher
      parameters:
        - name: teacher_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Teacher data
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
      responses:
        '204':
          description: The teacher was updated
        '404':
          description: The teacher was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          - teacher # teacher can change only himself
    delete:
      tags:
        - teacher
      summary: Delete the teacher
      operationId: deleteTeacher
      parameters:
        - name: teacher_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: The teacher was deleted
        '404':
          description: The teacher was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          
  /teacher/login:
    post:
      tags:
        - teacher
      summary: Logs teacher into the system
      description: ''
      operationId: loginTeacher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: Sanjo
                password:
                  type: string
                  example: sd355ohf2348d
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid login/password supplied
          
  /teacher/logout:
    get:
      tags:
        - teacher
      summary: Logs out current logged in teacher session
      description: ''
      operationId: logoutTeacher
      parameters: []
      responses:
        default:
          description: successful operation
      security:
        - auth:
          - admin
          - teacher
  
  /university:
    get:
      tags:
        - university
      summary: Get all universities
      operationId: getAllUniversities
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/University"
    post:
      summary: Add the university
      operationId: addUniversity
      tags:
        - university
      requestBody:
          description: New university
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/University'
      responses:
        '204':
          description: The university was created
        '400':
          description: University with this name already exists
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
          
  /univesity/{university_id}:
    post:
      summary: Update the university
      operationId: putUniversity
      tags:
        - university
      parameters:
        - name: university_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
          description: New university
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/University'
      responses:
        '204':
          description: The university was updated
        '404':
          description: The university was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
    delete:
      tags:
        - university
      summary: Delete the university
      operationId: deleteUniversity
      parameters:
        - name: university_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: The university was deleted
        '404':
          description: The university was not found
        '401':
          description: Unauthorized
        '403':
          description: Not enough permissions
      security:
        - auth:
          - admin
  
  /univesity/{university_id}/rating:
    get:
      tags:
        - university
      summary: Get the university's rating
      operationId: getUniversityRating
      parameters:
        - name: university_id
          in: path
          required: true
          schema:
            type: integer
        - name: year
          in: query
          required: true
          schema:
            type: integer
        - name: semester # 1 or 2
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 2
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversityRating'
        '404':
          description: The university was not found
    
  
components:
  schemas:
    StudentRating:
      type: object
      properties:
        subjects:
          type: array
          items:
            type: object
            properties:
              subject_id:
                type: integer
                example: 50
                minimum: 0
              points:
                type: integer
                example: 50
                minimum: 0
                maximum: 100
    
    UniversityRating:
      type: object
      properties:
        rating:
          type: array
          items:
            type: object
            properties:
              student_id:
                type: integer
                example: 50
                minimum: 0
              student:
                $ref: "#/components/schemas/Student"
              points:
                type: integer
                example: 50
                minimum: 0
                maximum: 100
    
    Student:
      type: object
      properties:
        last_name:
          type: string
          example: dungeon
        first_name:
          type: string
          example: master
        university_id:
          type: integer
          minimum: 0
          
    Teacher:
      type: object
      properties:
        last_name:
          type: string
          example: dungeon
        first_name:
          type: string
          example: master
        university_id:
          type: integer
          minimum: 0
        subject_ids:
          type: array
          items:
            type: integer
            example: 1234
            minimum: 0

    Subject:
      type: object
      properties:
        name:
          type: string
          example: Math
        teacher_ids:
          type: array
          items:
            type: integer
            example: 1234
            minimum: 0
    
    University:
      type: object
      properties:
        name:
          type: string
          example: NULP
        address:
          type: string
          example: Lviv
    
  securitySchemes:            
    auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost/authorize
          scopes:
            admin: All rights
            teacher: Teacher can edit subjects
            student: student can view it's rating
    
